
import java.awt.BasicStroke;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Oskar
 */
public class posaint_canvas extends javax.swing.JFrame {
    
    private CustomCanvas canvas;
    
    public class CustomCanvas extends Canvas {
        public BufferedImage canvasImage;
        public Graphics2D g2;
        public BufferedImage previewImage;
        public Graphics2D gPreview;
        
        public CustomCanvas(int width, int height) {
            canvasImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
            g2 = canvasImage.createGraphics();
            
            previewImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
            gPreview = previewImage.createGraphics();
            
            clear();
        }
        
        public void clear() {
            g2.setColor(Color.WHITE);
            g2.fillRect(0, 0, canvasImage.getWidth(), canvasImage.getHeight());
            repaint();
        }
        
        public void clearPreview() {
            gPreview.setComposite(java.awt.AlphaComposite.Clear);
            gPreview.fillRect(0, 0, previewImage.getWidth(), previewImage.getHeight());
            gPreview.setComposite(java.awt.AlphaComposite.SrcOver);
        }
        
        @Override
        public void paint(Graphics g) {
            super.paint(g);
            g.drawImage(canvasImage, 0, 0, this);
            g.drawImage(previewImage, 0, 0, this);
        }
    }
    
    public void create(int width, int height){
        canvasPanel.setPreferredSize(new java.awt.Dimension(width, height));
        canvasPanel.setSize(width, height);
        canvasPanel.revalidate();
        canvas = new CustomCanvas(canvasPanel.getWidth(), canvasPanel.getHeight());
        canvas.setPreferredSize(new java.awt.Dimension(width, height));
        canvas.setSize(width, height);
        canvas.revalidate();
        canvas.clear();
    }
    
    
    Color brushColor = Color.BLACK;
    boolean draw_figure = false;
    int beninging_x = 0;
    int beninging_y = 0;
    int old_mouse_x = 0;
    int old_mouse_y = 0;
    int first_poz_x = 0;
    int first_poz_y = 0;
    /**
     * Creates new form posaint
     */
    public posaint_canvas() {
        initComponents();
        canvas = new CustomCanvas(canvasPanel.getWidth(), canvasPanel.getHeight());
        canvas.setSize(canvasPanel.getSize());
        canvas.setBackground(Color.WHITE);
        canvas.setFocusable(true);

        canvasPanel.setLayout(new java.awt.BorderLayout());
        canvasPanel.add(canvas, java.awt.BorderLayout.CENTER);
        canvasPanel.revalidate();
        canvasPanel.repaint();
        
        canvas.repaint();
        canvas.g2.setColor(Color.WHITE);
        canvas.g2.fillRect(0, 0, canvas.canvasImage.getWidth(), canvas.canvasImage.getHeight()); 
        
        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvasMousePressed(evt);
            }
            
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canvasMouseReleased(evt);
            }

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canvasMouseClicked(evt);
            }
        });

        canvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvasMouseDragged(evt);
            }

            @Override
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                canvasMouseMoved(evt);
            }
        });
    }
    
    private BufferedImage canvasImage;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        menu = new javax.swing.JPanel();
        tools = new javax.swing.JComboBox<>();
        brushSize = new javax.swing.JComboBox<>();
        colorChooser = new javax.swing.JButton();
        pickedColor = new javax.swing.JPanel();
        clear = new javax.swing.JButton();
        canvasPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        newCanvas = new javax.swing.JMenuItem();
        saveAs = new javax.swing.JMenuItem();
        useFile = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Posaint");
        setBackground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(21, 21));
        setSize(new java.awt.Dimension(512, 512));

        menu.setPreferredSize(new java.awt.Dimension(512, 36));

        tools.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ołówek", "Prostokąt", "Linia", "Okrąg", "Wielokąt" }));
        tools.setPreferredSize(new java.awt.Dimension(96, 24));

        brushSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1 px", "2 px", "3 px", "4 px", "5 px" }));
        brushSize.setMinimumSize(new java.awt.Dimension(48, 22));
        brushSize.setPreferredSize(new java.awt.Dimension(72, 24));

        colorChooser.setText("Kolor");
        colorChooser.setMaximumSize(new java.awt.Dimension(2, 25));
        colorChooser.setPreferredSize(new java.awt.Dimension(72, 24));
        colorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserActionPerformed(evt);
            }
        });

        pickedColor.setBackground(new java.awt.Color(0, 0, 0));
        pickedColor.setPreferredSize(new java.awt.Dimension(24, 24));

        javax.swing.GroupLayout pickedColorLayout = new javax.swing.GroupLayout(pickedColor);
        pickedColor.setLayout(pickedColorLayout);
        pickedColorLayout.setHorizontalGroup(
            pickedColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );
        pickedColorLayout.setVerticalGroup(
            pickedColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );

        clear.setText("Wyczyść");
        clear.setMaximumSize(new java.awt.Dimension(75, 25));
        clear.setMinimumSize(new java.awt.Dimension(33, 23));
        clear.setPreferredSize(new java.awt.Dimension(96, 24));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout canvasPanelLayout = new javax.swing.GroupLayout(canvasPanel);
        canvasPanel.setLayout(canvasPanelLayout);
        canvasPanelLayout.setHorizontalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        canvasPanelLayout.setVerticalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 452, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout menuLayout = new javax.swing.GroupLayout(menu);
        menu.setLayout(menuLayout);
        menuLayout.setHorizontalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tools, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(brushSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pickedColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(canvasPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        menuLayout.setVerticalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tools, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(brushSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(colorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pickedColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canvasPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        file.setText("Plik");

        newCanvas.setText("Nowe płutno");
        newCanvas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCanvasActionPerformed(evt);
            }
        });
        file.add(newCanvas);

        saveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveAs.setText("Zapisz jako");
        saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsActionPerformed(evt);
            }
        });
        file.add(saveAs);

        useFile.setText("Wczytaj");
        useFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useFileActionPerformed(evt);
            }
        });
        file.add(useFile);

        jMenuBar1.add(file);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menu, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void colorChooserActionPerformed(java.awt.event.ActionEvent evt) {                                             
        brushColor = JColorChooser.showDialog(null, "Wybierz kolor", brushColor);
        pickedColor.setBackground(brushColor);
    }                                            

    private void saveAsActionPerformed(java.awt.event.ActionEvent evt) {                                       
        save s = new save(canvas.canvasImage);
        s.setVisible(true);
    }                                      

    private void useFileActionPerformed(java.awt.event.ActionEvent evt) {
        JOptionPane.showMessageDialog(this, "*UWAGA - ta funkcja jest niedopracowana jednak wciąż w pwenym stopniu funkcjonalna");
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                BufferedImage img = ImageIO.read(selectedFile);

                canvasImage = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_ARGB);
                canvas.g2 = canvasImage.createGraphics();
                canvas.repaint();
                canvas.g2.drawImage(img, 0, 0, null);

            
                canvas.canvasImage = canvasImage; 
                java.awt.Dimension newSize = new java.awt.Dimension(img.getWidth(), img.getHeight());
                canvas.setPreferredSize(newSize);
                canvas.setSize(newSize);
                canvas.revalidate();
                canvas.repaint();

                canvasPanel.revalidate();
                canvasPanel.repaint();
                
                
                this.pack();
                
                java.awt.Component parent = canvas.getParent();
                if (parent instanceof javax.swing.JViewport vp) {
                    vp.setViewPosition(new java.awt.Point(0, 0));
                }
            }catch (IOException ex) {
                javax.swing.JOptionPane.showMessageDialog(this, "Nie udało się wczytać obrazu!");
            }
        }
    }                                       

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {                                      
        canvas.clear();
    }                                     

    private void newCanvasActionPerformed(java.awt.event.ActionEvent evt) {  
        new_canvas nc = new new_canvas();
        nc.setVisible(true);
    }                                         
    
    private void canvasMousePressed(java.awt.event.MouseEvent evt){
            if (tools.getSelectedIndex() != 4){
            old_mouse_x = evt.getX();
            old_mouse_y = evt.getY();
            first_poz_x = evt.getX();
            first_poz_y = evt.getY();
        }
    }
    
    private void canvasMouseReleased(java.awt.event.MouseEvent evt){
        canvas.g2.setStroke(new BasicStroke(brushSize.getSelectedIndex() + 1));
        canvas.g2.setColor(brushColor);

        switch(tools.getSelectedIndex()){
                case 1:
                    if(first_poz_x>evt.getX()){
                        if(first_poz_y>evt.getY()){
                            canvas.g2.fillRect(evt.getX(), evt.getY(), first_poz_x-evt.getX(), first_poz_y-evt.getY());
                        }else{
                            canvas.g2.fillRect(evt.getX(), first_poz_y, first_poz_x-evt.getX(), evt.getY()-first_poz_y);
                        }
                    }else{
                        if(first_poz_y>evt.getY()){
                            canvas.g2.fillRect(first_poz_x, evt.getY(), evt.getX()-first_poz_x, first_poz_y-evt.getY());
                        }else{
                            canvas.g2.fillRect(first_poz_x, first_poz_y, evt.getX()-first_poz_x, evt.getY()-first_poz_y);
                        }
                    }
                    break;
                case 2:
                    canvas.g2.drawLine(first_poz_x, first_poz_y, evt.getX(), evt.getY());
                    break;
                case 3:
                    if(first_poz_x>evt.getX()){
                        if(first_poz_y>evt.getY()){
                            canvas.g2.fillOval(evt.getX(), evt.getY(), first_poz_x-evt.getX(), first_poz_y-evt.getY());
                        }else{
                            canvas.g2.fillOval(evt.getX(), first_poz_y, first_poz_x-evt.getX(), evt.getY()-first_poz_y);
                        }
                    }else{
                        if(first_poz_y>evt.getY()){
                            canvas.g2.fillOval(first_poz_x, evt.getY(), evt.getX()-first_poz_x, first_poz_y-evt.getY());
                        }else{
                            canvas.g2.fillOval(first_poz_x, first_poz_y, evt.getX()-first_poz_x, evt.getY()-first_poz_y);
                        }
                    }
                    break;
            }

        canvas.repaint();
    }
    
    private void canvasMouseClicked(java.awt.event.MouseEvent evt){
        if (tools.getSelectedIndex()==4){
            if(!draw_figure){
                beninging_x = evt.getX();
                beninging_y = evt.getY();
                first_poz_x = evt.getX();
                first_poz_y = evt.getY();
                canvas.g2 = canvas.canvasImage.createGraphics();
                canvas.repaint();
                draw_figure = true;
            }else if(Math.abs(beninging_x-evt.getX())<5 && Math.abs(beninging_y-evt.getY())<5){
                draw_figure = false;
                canvas.g2.drawLine(first_poz_x, first_poz_y, beninging_x, beninging_y);
                canvas.clearPreview();
                canvas.repaint();
            }else{
                System.out.println("click");
                canvas.g2.setStroke(new BasicStroke(brushSize.getSelectedIndex() + 1));
                canvas.g2.setColor(brushColor);
                canvas.g2.drawLine(first_poz_x, first_poz_y, evt.getX(), evt.getY());
                canvas.repaint();
                if(true){
                    first_poz_x = evt.getX();
                    first_poz_y = evt.getY();
                }
            }
        }
        
    }
    
    private void canvasMouseDragged(java.awt.event.MouseEvent evt){
        if (tools.getSelectedIndex() == 0) {
            canvas.g2.setColor(brushColor);
            canvas.g2.setStroke(new BasicStroke(brushSize.getSelectedIndex() + 1));
            canvas.g2.drawLine(old_mouse_x, old_mouse_y, evt.getX(), evt.getY());
            old_mouse_x = evt.getX();
            old_mouse_y = evt.getY();
            canvas.repaint();
            return;
        }
        if(tools.getSelectedIndex()>0){
            canvas.clearPreview();
            
            canvas.gPreview.setColor(brushColor);
            canvas.gPreview.setStroke(new BasicStroke(brushSize.getSelectedIndex() + 1));
            
            switch(tools.getSelectedIndex()){
                case 1:
                    if(first_poz_x>evt.getX()){
                        if(first_poz_y>evt.getY()){
                            canvas.gPreview.fillRect(evt.getX(), evt.getY(), first_poz_x-evt.getX(), first_poz_y-evt.getY());
                        }else{
                            canvas.gPreview.fillRect(evt.getX(), first_poz_y, first_poz_x-evt.getX(), evt.getY()-first_poz_y);
                        }
                    }else{
                        if(first_poz_y>evt.getY()){
                            canvas.gPreview.fillRect(first_poz_x, evt.getY(), evt.getX()-first_poz_x, first_poz_y-evt.getY());
                        }else{
                            canvas.gPreview.fillRect(first_poz_x, first_poz_y, evt.getX()-first_poz_x, evt.getY()-first_poz_y);
                        }
                    }
                    break;
                case 2:
                    canvas.gPreview.drawLine(first_poz_x, first_poz_y, evt.getX(), evt.getY());
                    break;
                case 3:
                    if(first_poz_x>evt.getX()){
                        if(first_poz_y>evt.getY()){
                            canvas.gPreview.fillOval(evt.getX(), evt.getY(), first_poz_x-evt.getX(), first_poz_y-evt.getY());
                        }else{
                            canvas.gPreview.fillOval(evt.getX(), first_poz_y, first_poz_x-evt.getX(), evt.getY()-first_poz_y);
                        }
                    }else{
                        if(first_poz_y>evt.getY()){
                            canvas.gPreview.fillOval(first_poz_x, evt.getY(), evt.getX()-first_poz_x, first_poz_y-evt.getY());
                        }else{
                            canvas.gPreview.fillOval(first_poz_x, first_poz_y, evt.getX()-first_poz_x, evt.getY()-first_poz_y);
                        }
                    }
                    break;
            }
            canvas.repaint();
        }
    }
    
    private void canvasMouseMoved(java.awt.event.MouseEvent evt){
        if(draw_figure && tools.getSelectedIndex()==4){
            canvas.clearPreview();
            
            canvas.gPreview.setColor(brushColor);
            canvas.gPreview.setStroke(new BasicStroke(brushSize.getSelectedIndex() + 1));
            canvas.gPreview.drawLine(first_poz_x, first_poz_y, evt.getX(), evt.getY());
            canvas.repaint();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(posaint_canvas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(posaint_canvas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(posaint_canvas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(posaint_canvas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new posaint_canvas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JComboBox<String> brushSize;
    private javax.swing.JPanel canvasPanel;
    private javax.swing.JButton clear;
    private javax.swing.JButton colorChooser;
    private javax.swing.JMenu file;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPanel menu;
    private javax.swing.JMenuItem newCanvas;
    private javax.swing.JPanel pickedColor;
    private javax.swing.JMenuItem saveAs;
    private javax.swing.JComboBox<String> tools;
    private javax.swing.JMenuItem useFile;
    // End of variables declaration                   
}
